@ngdoc overview
@name 5 - Automation
@description

|--

^^ Living Documentation

* Automation generates documentation with test results embedded
* Living documentation is kept in sync with the system by running automation on each change
* Feedback is fast

^^ Stop!

* Using documentation that "is not quite correct"
* Digging functionality and requirements out of code

^^ Exercise

1.  Let's view the files we are going to work with in Webstorm

    Click the second icon down on the left called "Home Folder" this will open the file finder. You can then open Webstorm by clicking the icon.

    <img class="diagram" src="img/spec-by-example/ubuntu-home-folder.png" width="550"/>

    Select "Open Directory" then navigate to and select the folder `/home/vagrant/tutorial/specification-by-example`

    You should now have Webstorm open with the specification by example directory as the root making it easy to navigate to all the files we will be working on

2.  Right click on the file web/calc.html and select "Open in Browser"

    This is the application we are testing, spend a few minutes getting familiar with the application. Notice any strange behaviour?

    Go back to Webstorm and right click on the file spec/CricketSpec.html and select "Open in Browser"

    Follow the "Basic Scoring" link. This is the living documentation. Now lets see if the tests are passing!

3.  In your browser in a new tab go to assurity-starter:8080

    This is the Jenkins build server that runs the tests, it brings the documentation to life and provides feedback on the health of the system.

    Open the cricket-commit build by following the link. Trigger the build by clicking "Build Now"

    This is the first build in the deployment pipeline. Go back to Jenkins home by clicking the Jenkins logo on the top left.

    Find the Cricket Pipeline view and watch the builds running...

    The first cricket-commit build triggers other builds in the deployment pipeline, lets see how far it goes before failing.

    What do you think is happening at each stage of the build?

        cricket-commit should pass
        cricket-acceptance-deploy should pass
        cricket-acceptance-test should fail

4.  See if you can find out why it is failing? Click the failing cricket-acceptance-test stage and see if you can find the "Console Output".

5.  It's time to try and fix the bug and get the living documentation back in sync with the system. First we need to learn how to run the tests locally.

    Open the Terminal command line application and navigate to `/home/vagrant/tutorial/spec-by-example`

    <pre>cd /home/vagrant/tutorial/spec-by-example</pre>

    Then run the following command:

    <pre>gradle test</pre>

    You should see the tests fail for the same reason but now we have more control over running the tests and faster feedback.

6.  Now go back to the code in Webstorm, can you find the code it is running? Can you fix the bug?

    Once you fix the code try running it locally again

    <pre>gradle test</pre>

    If it is fixed check it in using git. From the directory /home/vagrant/tutorial/spec-by-example run the following commands to check in your changes to git source control:

    <pre>git add .</pre>
    <pre>git commit -m "Fixed the bug."</pre>

7.  Go back to the build server and trigger the cricket-commit build if it has not already run.

    Does it pass?

    What other tests could you add to the specification to improve it?

--|